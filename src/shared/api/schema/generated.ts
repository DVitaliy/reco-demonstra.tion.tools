/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/app-service/get-apps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * List all apps.
         * @description Get apps page. Given page number and page size. Supporting 25 / 50 page size.
         */
        put: operations["app_service_get_apps"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        v1GetAppsRequest: {
            /** @description Filter by application name */
            appName?: string;
            /** @description Filter by category */
            category?: string;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
        };
        /** @example {
         *       "appRows": [
         *         {
         *           "appId": "appId",
         *           "appName": "appName",
         *           "appSources": [
         *             "source1",
         *             "source2"
         *           ],
         *           "category": "category"
         *         }
         *       ],
         *       "totalCount": 2
         *     } */
        v1GetAppsResponse: {
            appRows?: components["schemas"]["v1AppRow"][];
            /** Format: int32 */
            totalCount?: number;
        };
        /** @example {
         *       "appId": "appId",
         *       "appName": "appName",
         *       "appSources": [
         *         "source1",
         *         "source2"
         *       ],
         *       "category": "category"
         *     } */
        v1AppRow: {
            appId?: string;
            appName?: string;
            appSources?: string[];
            category?: string;
        };
        googlerpcStatus: {
            /** Format: int32 */
            code?: number;
            message?: string;
            details?: components["schemas"]["protobufAny"][];
        };
        protobufAny: {
            "@type"?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    app_service_get_apps: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["v1GetAppsRequest"];
            };
        };
        responses: {
            /** @description A successful response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["v1GetAppsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["googlerpcStatus"];
                };
            };
            /** @description Unexpected error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["googlerpcStatus"];
                };
            };
        };
    };
}
