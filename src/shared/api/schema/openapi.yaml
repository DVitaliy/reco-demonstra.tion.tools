openapi: 3.1.1
info:
  title: Demo API
  version: "1.0.0"

paths:
  /api/auth/login:
    post:
      summary: Login user
      security: [] # публично
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              examples:
                valid:
                  summary: Valid JWT example
                  value:
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjMiLCJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20iLCJleHAiOjQ3Njk0NDAwMDB9.sQd5mR5-2Cz0n8tO9W2F6G8r3o2wQe1fVJ4p0m1i2kA
                    user: { id: "123", email: "user@example.com" }
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /api/auth/register:
    post:
      summary: Register user
      security: [] # публично
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              examples:
                valid:
                  summary: Valid JWT example on register
                  value:
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0NTYiLCJlbWFpbCI6Im5ld0BleGFtcGxlLmNvbSIsImV4cCI6NDc2OTQ0MDAwMH0.3tD3d3h0l5sV8yQyZq1bQ0x8j8v7S1bYyUoVY4WcQYg
                    user: { id: "456", email: "new@example.com" }
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /api/myrole:
    get:
      summary: Get current user roles
      description: Возвращает массив ролей текущего пользователя. Требуется Bearer‑токен в заголовке **Authorization**.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of roles
          headers:
            Authorization:
              description: Токен передаётся в формате `Bearer <token>` в запросе.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              examples:
                sample:
                  value: ["user", "admin"]
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Error:
      type: object
      required: [message, code]
      properties:
        message: { type: string }
        code: { type: string }

    User:
      type: object
      required: [id, email]
      properties:
        id: { type: string }
        email: { type: string, format: email }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    RegisterRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }

    AuthResponse:
      type: object
      required: [accessToken, user]
      properties:
        accessToken:
          type: string
          description: JWT access token (mock)
        user:
          $ref: "#/components/schemas/User"
