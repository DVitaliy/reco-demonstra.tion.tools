/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Get Apps API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GooglerpcStatus,
  V1GetAppsRequest,
  V1GetAppsResponse
} from '../generated.schemas';





/**
 * Get apps page. Given page number and page size. Supporting 25 / 50 page size.
 * @summary List all apps.
 */
export const appServiceGetApps = (
    v1GetAppsRequest: V1GetAppsRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<V1GetAppsResponse>> => {
    
    
    return axios.default.put(
      `https://8feea1f7d131.ngrok-free.app/api/v1/app-service/get-apps`,
      v1GetAppsRequest,options
    );
  }



export const getAppServiceGetAppsMutationOptions = <TError = AxiosError<GooglerpcStatus | GooglerpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof appServiceGetApps>>, TError,{data: V1GetAppsRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof appServiceGetApps>>, TError,{data: V1GetAppsRequest}, TContext> => {

const mutationKey = ['appServiceGetApps'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof appServiceGetApps>>, {data: V1GetAppsRequest}> = (props) => {
          const {data} = props ?? {};

          return  appServiceGetApps(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AppServiceGetAppsMutationResult = NonNullable<Awaited<ReturnType<typeof appServiceGetApps>>>
    export type AppServiceGetAppsMutationBody = V1GetAppsRequest
    export type AppServiceGetAppsMutationError = AxiosError<GooglerpcStatus | GooglerpcStatus>

    /**
 * @summary List all apps.
 */
export const useAppServiceGetApps = <TError = AxiosError<GooglerpcStatus | GooglerpcStatus>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof appServiceGetApps>>, TError,{data: V1GetAppsRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof appServiceGetApps>>,
        TError,
        {data: V1GetAppsRequest},
        TContext
      > => {

      const mutationOptions = getAppServiceGetAppsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    